# 
# Synthesis run script generated by Vivado
# 

set TIME_start [clock seconds] 
namespace eval ::optrace {
  variable script "E:/Vivado Projects/Overture/Overture.runs/synth_1/OVERTURE.tcl"
  variable category "vivado_synth"
}

# Try to connect to running dispatch if we haven't done so already.
# This code assumes that the Tcl interpreter is not using threads,
# since the ::dispatch::connected variable isn't mutex protected.
if {![info exists ::dispatch::connected]} {
  namespace eval ::dispatch {
    variable connected false
    if {[llength [array get env XILINX_CD_CONNECT_ID]] > 0} {
      set result "true"
      if {[catch {
        if {[lsearch -exact [package names] DispatchTcl] < 0} {
          set result [load librdi_cd_clienttcl[info sharedlibextension]] 
        }
        if {$result eq "false"} {
          puts "WARNING: Could not load dispatch client library"
        }
        set connect_id [ ::dispatch::init_client -mode EXISTING_SERVER ]
        if { $connect_id eq "" } {
          puts "WARNING: Could not initialize dispatch client"
        } else {
          puts "INFO: Dispatch client connection id - $connect_id"
          set connected true
        }
      } catch_res]} {
        puts "WARNING: failed to connect to dispatch server - $catch_res"
      }
    }
  }
}
if {$::dispatch::connected} {
  # Remove the dummy proc if it exists.
  if { [expr {[llength [info procs ::OPTRACE]] > 0}] } {
    rename ::OPTRACE ""
  }
  proc ::OPTRACE { task action {tags {} } } {
    ::vitis_log::op_trace "$task" $action -tags $tags -script $::optrace::script -category $::optrace::category
  }
  # dispatch is generic. We specifically want to attach logging.
  ::vitis_log::connect_client
} else {
  # Add dummy proc if it doesn't exist.
  if { [expr {[llength [info procs ::OPTRACE]] == 0}] } {
    proc ::OPTRACE {{arg1 \"\" } {arg2 \"\"} {arg3 \"\" } {arg4 \"\"} {arg5 \"\" } {arg6 \"\"}} {
        # Do nothing
    }
  }
}

OPTRACE "synth_1" START { ROLLUP_AUTO }
OPTRACE "Creating in-memory project" START { }
create_project -in_memory -part xc7z010iclg225-1L

set_param project.singleFileAddWarning.threshold 0
set_param project.compositeFile.enableAutoGeneration 0
set_param synth.vivado.isSynthRun true
set_property webtalk.parent_dir {E:/Vivado Projects/Overture/Overture.cache/wt} [current_project]
set_property parent.project_path {E:/Vivado Projects/Overture/Overture.xpr} [current_project]
set_property default_lib xil_defaultlib [current_project]
set_property target_language Verilog [current_project]
set_property ip_output_repo {e:/Vivado Projects/Overture/Overture.cache/ip} [current_project]
set_property ip_cache_permissions {read write} [current_project]
OPTRACE "Creating in-memory project" END { }
OPTRACE "Adding files" START { }
read_verilog -library xil_defaultlib {
  {E:/Turing Complete/custom_components/ALU.v}
  {E:/Turing Complete/custom_components/COND.v}
  {E:/Turing Complete/custom_components/DEC.v}
  {E:/Turing Complete/custom_components/RegisterPlus.v}
  {E:/Turing Complete/builtin_components/TC_Add.v}
  {E:/Turing Complete/builtin_components/TC_And.v}
  {E:/Turing Complete/builtin_components/TC_Constant.v}
  {E:/Turing Complete/builtin_components/TC_Counter.v}
  {E:/Turing Complete/builtin_components/TC_Decoder3.v}
  {E:/Turing Complete/builtin_components/TC_IOSwitch.v}
  {E:/Turing Complete/builtin_components/TC_Mux.v}
  {E:/Turing Complete/builtin_components/TC_Neg.v}
  {E:/Turing Complete/builtin_components/TC_Nor.v}
  {E:/Turing Complete/builtin_components/TC_Not.v}
  {E:/Turing Complete/builtin_components/TC_Or.v}
  {E:/Turing Complete/builtin_components/TC_Program8_1.v}
  {E:/Turing Complete/builtin_components/TC_Register.v}
  {E:/Turing Complete/builtin_components/TC_Splitter8.v}
  {E:/Turing Complete/builtin_components/TC_Switch.v}
  {E:/Turing Complete/builtin_components/TC_Xor.v}
  {E:/Turing Complete/OVERTURE.v}
}
OPTRACE "Adding files" END { }
# Mark all dcp files as not used in implementation to prevent them from being
# stitched into the results of this synthesis run. Any black boxes in the
# design are intentionally left as such for best results. Dcp files will be
# stitched into the design at a later time, either when this synthesis run is
# opened, or when it is stitched into a dependent implementation run.
foreach dcp [get_files -quiet -all -filter file_type=="Design\ Checkpoint"] {
  set_property used_in_implementation false $dcp
}
set_param ips.enableIPCacheLiteLoad 1

read_checkpoint -auto_incremental -incremental {E:/Vivado Projects/Overture/Overture.srcs/utils_1/imports/synth_1/OVERTURE.dcp}
close [open __synthesis_is_running__ w]

OPTRACE "synth_design" START { }
synth_design -top OVERTURE -part xc7z010iclg225-1L
OPTRACE "synth_design" END { }
if { [get_msg_config -count -severity {CRITICAL WARNING}] > 0 } {
 send_msg_id runtcl-6 info "Synthesis results are not added to the cache due to CRITICAL_WARNING"
}


OPTRACE "write_checkpoint" START { CHECKPOINT }
# disable binary constraint mode for synth run checkpoints
set_param constraints.enableBinaryConstraints false
write_checkpoint -force -noxdef OVERTURE.dcp
OPTRACE "write_checkpoint" END { }
OPTRACE "synth reports" START { REPORT }
generate_parallel_reports -reports { "report_utilization -file OVERTURE_utilization_synth.rpt -pb OVERTURE_utilization_synth.pb"  } 
OPTRACE "synth reports" END { }
file delete __synthesis_is_running__
close [open __synthesis_is_complete__ w]
OPTRACE "synth_1" END { }
